>What is a hash table?

A hash table is a type of data structure that stores each value by linking it to a key, forming key-value pairs.

>What is hashing?

Hashing is the conversion from a string to a numerical index.

>How does a hash table store data?

A simile I could use is that a hash table is kind of like an amazon package. You have your purchase(value) in the package and the shipping label is like the key and hash code. For each package, there's a unique and individual key and hash code to identify the information of the package. 

>How are hash tables and objects different?

They are pretty similar except that a javascript object doesn't have a code or key that associates with accessing the information stored in an object unless you can't calling the object by it's name. You access properties on an object with dot notation or bracket notation.

>Determine whether you would use a hash table or an object to store each of the following pieces of data:

>A list of pets and their unique names.

Object

>The name, age, and the birthday of your best friend.

Hash table

>The name and location of every company in a given city.

Hash table

>All of the books checked out from a library by a particular individual.

Hash table

>The primary and secondary phone numbers for a contact.

Object

>Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

var hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

let hashTable = function() {

  let customers = [];
  const storageLimit = 10;
  
  this.print = function() {
    console.log(customers)
  }

  this.add = function(phone, name, address) {
    var index = hash(phone, storageLimit);
    if (customers[index] === undefined) {
      customers[index] = [
        [phone, name, address]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < customers[index].length; i++) {
        if (customers[index][i][0] === phone) {
          customers[index][i][1] = name;
          inserted = true;
        }
      }
      if (inserted === false) {
        customers[index].push([phone, name, address]);
      }
    }
  };
  
    
  this.find = function(phone) {
    var index = hash(phone, storageLimit);
    if (customers[index] === undefined) {
      return "No results found";
    } else {
      for (var i = 0; i < customers[index].length; i++) {
        if (customers[index][i][0] === phone) {
          return customers[index][i][1];
        }
      }
    }
  };

};

let customerList = new HashTable();
customerList.add('5124531129', 'Julie Ni', '8448 W Central');
customerList.add('3165193910', 'Christian Withers', '612 E Douglas');
customerList.add('8264990121', 'George Ni', '210 Emporia Ave');
customerList.add('3165167802', 'Fred Sosa', '132 S Lincoln');
customerList.add('3162278400', 'Yanette Candelas', '8865 Main St');
console.log(customerList.find('3165193910'));
console.log(customerList.find('3162278400'));
console.log(customerList.find('8264990121'));
customerList.print();


>Build a system that allows a store owner to track their store's inventory using a hash table for storage.

var hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

let HashTable = function() {

  let items = [];
  const storageLimit = 10;
  
  this.print = function() {
    console.log(items)
  }

  this.add = function(itemName, quantity) {
    var index = hash(itemName, storageLimit);
    if (items[index] === undefined) {
      items[index] = [
        [itemName, quantity]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < items[index].length; i++) {
        if (items[index][i][0] === itemName) {
          items[index][i][1] = quantity;
          inserted = true;
        }
      }
      if (inserted === false) {
        items[index].push([itemName, quantity]);
      }
    }
  };
  
    
  this.find = function(itemName) {
    var index = hash(itemName, storageLimit);
    if (items[index] === undefined) {
      return undefined;
    } else {
      for (var i = 0; i < items[index].length; i++) {
        if (items[index][i][0] === itemName) {
          return items[index][i][1];
        }
      }
    }
  };

};

var itemsList = new HashTable();
itemsList.add('plungers', '12');
itemsList.add('notebooks', '32');
itemsList.add('bananas', '88');
itemsList.add('snuggies', '6');
console.log(itemsList.find('plungers'));
console.log(itemsList.find('notebooks'));
console.log(itemsList.find('bananas'));
console.log(itemsList.find('snuggies'));
itemsList.print();


>Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

var hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

let HashTable = function() {

  let papers = [];
  const storageLimit = 10;
  
  this.print = function() {
    console.log(papers)
  }

  this.add = function(name, publisher, date) {
    var index = hash(name, storageLimit);
    if (papers[index] === undefined) {
      papers[index] = [
        [name, publisher, date]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < papers[index].length; i++) {
        if (papers[index][i][0] === name) {
          papers[index][i][1] = publisher;
          inserted = true;
        }
      }
      if (inserted === false) {
        papers[index].push([name, publisher, date]);
      }
    }
  };
  
    
  this.find = function(publisher, date) {
    var index = hash(publisher, storageLimit);
    if (papers[index] === undefined) {
      return "No results found";
    } else {
      for (var i = 0; i < papers[index].length; i++) {
        if (papers[index][i][0] === publisher && papers[index][i][2] === date) {
          return papers[index][i][1];
        }
      }
    }
  };
  
  this.date = function(date) {
    var index = hash(date, storageLimit);
    if (papers[index] === undefined) {
      return "No results found";
    } else {
      for (var i = 0; i < papers[index].length; i++) {
        if (papers[index][i][2] === date) {
          return papers[index][i][0];
        }
      }
    }
  };

};

let newsList = new HashTable();
newsList.add('NYT', 'New York Times', '09-08-2018');
newsList.add('Dow Jones & Company', 'The Wall Street Journal', '02-22-2016');
newsList.add('Tribune Publishing', 'Chicago Tribune', '02-05-2017');
newsList.add('Fred Ryan', 'The Washington Post', '06-27-2018');
console.log(newsList.find('The Wall Street Journal', '02-22-2016'));
console.log(newsList.find('Chicago Tribune', '02-05-2017'));
console.log(newsList.find('New York Times', '09-08-2018'))
