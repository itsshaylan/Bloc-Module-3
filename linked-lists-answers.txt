1. What are some pros and cons of using linked lists instead of arrays?

The advantage of using a linked list instead of an array is that a linked list doesn't take up memory as an array does. The more data an array holds, the more memory it needs on your computer to store data therefore it's holding your memory hostage. A series of nodes make up a linked list and each node contains a reference/link of the next node in the list. Nodes contain the piece of data. The con of a linked list is that indexing is not possible. If you want to search for something in a linked list, you'd have to start from the beginning.

2. A real life example would be getting sick and asking the person if they got you sick, then asking that person who got them sick. It's a chain because sickness gets passed around. 

3. The pseudocode doesn't contain a while loop that allows it to move from a node to the next.

function LinkedList(){
    this.head = null;
  }

  LinkedList.prototype.push = function(val){
    var node = {
      value: val,
      next: null
    }
    if(!this.head){
      this.head = node;
    } else {
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
    }
  }
  const list = new LinkedList();
  list.push(2);
  list.push(3);
  list.push(4);

  list.head;
  list.head.next;
  list.head.next.next;

4. 

function LinkedList(){
  this.head = null;
}

LinkedList.prototype.push = function(val){
  var node = {
    value: val,
    next: null
  }
  if(!this.head){
    this.head = node;
  } else {
    current = this.head;
    while(current.next){
      current = current.next;
    }
    current.next = node;
  }
}

const list = new LinkedList();
list.push("a");
list.push("c");
list.push("d");
list.push("d");
list.push("a");


list.head;
//list.head.next;
//list.head.next.next;

LinkedList.prototype.duplicate = function(){
  if(!this.head || !this.head.next){
    console.log("No Duplicates");
  }
  var thisNode = this.head;
  while(thisNode !== null){
    var previousNode = thisNode;
    var nextNode = thisNode.next;
    while(nextNode !== null){
      if(thisNode.value === nextNode.value){
        previousNode.next = nextNode.next;
      } else {
        previousNode = nextNode;
      }
      nextNode = nextNode.next;
    }
    thisNode = thisNode.next;
  }
  return this;
} 
list.duplicate() 

5. 

function LinkedList(){
  this.head = null;
}

LinkedList.prototype.push = function(val){
  var node = {
    value: val,
    next: null
  }
  if(!this.head){
    this.head = node;
  } else {
    current = this.head;
    while(current.next){
      current = current.next;
    }
    current.next = node;
  }
}

const list = new LinkedList();
list.push("a");
list.push("b");
list.push("c");
list.push("d");

list.head;
//list.head.next;
//list.head.next.next;

function reverse(head){
  let node = head;
  let previous; 
  let temp;

  while(node){
    temp = node.next;
    node.next = previous; 
    previous = node;
    node = temp;
  }
  return previous; 
}

reverse(list.head) 